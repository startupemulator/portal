name: StartupEmulator Portal CI

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Tests
        run: |
          npm ci
          npx playwright install
          npm run build
          npm run lint
          npm run test:e2e
        env:
          CI: true

      - name: Generate version
        run: |
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          COMMIT_DATE=`git log --pretty=format:'%cs %h' -n 1`
          echo "${VERSION} ${COMMIT_DATE}" > static/version.txt
          cat static/version.txt

      - name: Build docker
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to Stage
        uses: appleboy/ssh-action@master
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        with:
          host: ${{ secrets.PLUM_HOST }}
          username: ${{ secrets.PLUM_USER }}
          key: ${{ secrets.PLUM_KEY }}
          port: 22
          script: |
            cd /opt/startupemulator/
            ./deploy.sh

      - name: Audit Stage URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v8
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        with:
          urls: https://${{secrets.PLUM_HOST}}/
#          budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
        with:
          host: ${{ secrets.STAGE_HOST }}
          username: ${{ secrets.STAGE_USER }}
          key: ${{ secrets.STAGE_KEY }}
          port: 22
          script: |
            cd /opt/startupemulator/
            ./deploy.sh
